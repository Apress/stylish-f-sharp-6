#!markdown

# Sample code for Chapter 9 of "Stylish F# 6" by Kit Eason

#!markdown

Listing 9-1. *Binding a function to another label*

#!fsharp

// int -> int -> int
let add a b = a + b

// int -> int -> int
let addUp = add

// 5
printfn "%i" (add 2 3)

// 5
printfn "%i" (addUp 2 3)

#!markdown

Listing 9-2. *A function as a parameter for another function*

#!fsharp

let add a b = a + b

let applyAndPrint f a b =
    let r = f a b
    printfn "%i" r
    
// "5"
applyAndPrint add 2 3

#!markdown

Listing 9-3. *Partial application*

#!fsharp

// int -> int -> int
let add a b = a + b

// int -> int
let addTwo = add 2

// 5
printfn "%i" (add 2 3)

// 5
printfn "%i" (addTwo 3)

#!markdown

Listing 9-4. *Parenthesizing strings using partial application*

#!fsharp

let surround prefix suffix s =
    sprintf "%s%s%s" prefix s suffix

let roundParen = surround "(" ")"

let squareParen = surround "[" "]"

let xmlComment = surround "<!--" "-->"

let quote q = surround q q

let doubleQuote = quote "\""

// ~~Markdown strikethrough~~
printfn "%s" (surround "~~" "~~" "Markdown strikethrough")
// (Round parentheses)
printfn "%s" (roundParen "Round parentheses")
// [Square parentheses]
printfn "%s" (squareParen "Square parentheses")
// <!--XML comment-->
printfn "%s" (xmlComment "XML comment")
// "To be or not to be"
printfn "%s" (doubleQuote "To be or not to be")

#!markdown

Listing 9-5. *Mixed tupled and curried styles*

#!fsharp

let surround (prefix, suffix) s =
    sprintf "%s%s%s" prefix s suffix

let roundParen = surround ("(", ")")

let squareParen = surround ("[", "]")

let xmlComment = surround ("<!--", "-->")

let quote q = surround(q, q)

let doubleQuote = quote "\""

// ~~Markdown strikethrough~~
printfn "%s" (surround ("~~", "~~") "Markdown strikethrough")
// (Round parentheses)
printfn "%s" (roundParen "Round parentheses")
// [Square parentheses]
printfn "%s" (squareParen "Square parentheses")
// <!--XML comment-->
printfn "%s" (xmlComment "XML comment")
// "To be or not to be"
printfn "%s" (doubleQuote "To be or not to be")

#!markdown

Listing 9-6. *Mixed tupled and curried styles in the wild*

#!fsharp

type RingBuffer2D<'T>(items : 'T[,]) =
    let leni = items.GetLength(0)
    let lenj = items.GetLength(1)
    let _items = Array2D.copy items
    member _.Item
        with get(i, j) =
            _items.[i % leni, j % lenj]
        and set (i, j) value =
            _items.[i % leni, j % lenj] <- value

#!markdown

Listing 9-7. *Function signatures and function application*

#!fsharp

// int -> int -> int
let add a b = a + b

// int -> int
let addTwo = add 2

// int
let result = addTwo 3

#!markdown

Listing 9-8. *Function signature for tupled arguments*

#!fsharp

// int * int -> int
let add(a, b) = a + b

// int
let result = add(2, 3)

#!markdown

Listing 9-9. *A function as a parameter for another function*

#!fsharp

let add a b = a + b

let applyAndPrint f a b =
    let r = f a b
    printfn "%i" r

// "5"
applyAndPrint add 2 3

#!markdown

Listing 9-10. *Using type hints to specify function types*

#!fsharp

// Takes curried arguments:
let add a b = a + b

// Takes tupled argument:
let addTupled(a, b) = a + b

// f must take curried arguments and return an int:
let applyAndPrint1 (f : 'a -> 'b -> int) a b =
    let r = f a b
    printfn "%i" r

// f must take curried integer arguments and return an int:
let applyAndPrint2 (f : int -> int -> int) a b =
    let r = f a b
    printfn "%i" r

// f must take tupled integer arguments and return an int:
let applyAndPrint3 (f : int * int -> int) a b =
    let r = f(a, b)
    printfn "%i" r

// Must use the curried version of add here:
applyAndPrint1 add 2 3
applyAndPrint2 add 2 3

// Must use the tupled version of add here:
applyAndPrint3 addTupled 2 3

#!markdown

Listing 9-11. *Explicitly returning a function*

#!fsharp

// int -> int -> int
let add a =
    fun b -> a + b

// 5
printfn "%i" (add 2 3)

#!markdown

Listing 9-12. *A simple counter using explicit returning of a function*

#!fsharp

let counter start =
    let mutable current = start
    fun () ->
        let this = current
        current <- current + 1
        this

let c1 = counter 0
let c2 = counter 100
// c1: 0
// c2: 100
// c1: 1
// c2: 101
// c1: 2
// c2: 102
// c1: 3
// c2: 103
// c1: 4
// c2: 104
for _ in 0..4 do
    printfn "c1: %i" (c1())
    printfn "c2: %i" (c2())

#!markdown

Listing 9-13. *Hiding a System.Random instance by returning a function*

#!fsharp

let randomByte =
    let r = System.Random()
    fun () ->
        r.Next(0, 255) |> byte

// E.g. A3-52-31-D2-90-E6-6F-45-1C-3F-F2-9B-7F-58-34-44-
for _ in 0..15 do
    printf "%X-" (randomByte())
printfn ""

#!markdown

Listing 9-14. *First cut of removing typographic quotes*

#!fsharp

module Quotes = 

    module Typographic =
        let openSingle = '\u2018' // ‘
        let closeSingle = '\u2019' // ’
        let openDouble = '\u201C' // “
        let closeDouble = '\u201D' // ”

    module Neutral =
        let single = '\u0027' // '
        let double = '\u0022' // "

    /// Translate any typographic single quotes to neutral ones.
    let fixSingle (s : string) =
        s
            .Replace(Typographic.openSingle, Neutral.single)
            .Replace(Typographic.closeSingle, Neutral.single)

    /// Translate any typographic double quotes to neutral ones.
    let fixDouble (s : string) =
        s
            .Replace(Typographic.openDouble, Neutral.double)
            .Replace(Typographic.closeDouble, Neutral.double)

    /// Translate any typographic quotes to neutral ones.
    let fixTypographic (s : string) =
        s
        |> fixSingle
        |> fixDouble

"This had “typographical ‘quotes’”" |> Quotes.fixTypographic

#!markdown

Listing 9-15. *Basic function composition*

#!fsharp

module Quotes = 

    module Typographic =
        let openSingle = '\u2018' // ‘
        let closeSingle = '\u2019' // ’
        let openDouble = '\u201C' // “
        let closeDouble = '\u201D' // ”

    module Neutral =
        let single = '\u0027' // '
        let double = '\u0022' // "

    /// Translate any typographic single quotes to neutral ones.
    let fixSingle (s : string) =
        s
            .Replace(Typographic.openSingle, Neutral.single)
            .Replace(Typographic.closeSingle, Neutral.single)

    /// Translate any typographic double quotes to neutral ones.
    let fixDouble (s : string) =
        s
            .Replace(Typographic.openDouble, Neutral.double)
            .Replace(Typographic.closeDouble, Neutral.double)

    /// Translate any typographic quotes to neutral ones using
    /// function composition.
    let fixTypographic (s : string) =
        let fix = fixSingle >> fixDouble
        s |> fix

"This had “typographical ‘quotes’”" |> Quotes.fixTypographic

#!markdown

Listing 9-16. *Using a composed function without binding it to a name*

#!fsharp

module Quotes = 

    module Typographic =
        let openSingle = '\u2018' // ‘
        let closeSingle = '\u2019' // ’
        let openDouble = '\u201C' // “
        let closeDouble = '\u201D' // ”

    module Neutral =
        let single = '\u0027' // '
        let double = '\u0022' // "

    /// Translate any typographic single quotes to neutral ones.
    let fixSingle (s : string) =
        s
            .Replace(Typographic.openSingle, Neutral.single)
            .Replace(Typographic.closeSingle, Neutral.single)

    /// Translate any typographic double quotes to neutral ones.
    let fixDouble (s : string) =
        s
            .Replace(Typographic.openDouble, Neutral.double)
            .Replace(Typographic.closeDouble, Neutral.double)

    /// Translate any typographic quotes to neutral ones using
    /// function composition.
    let fixTypographic (s : string) =
        s |> (fixSingle >> fixDouble)
        
"This had “typographical ‘quotes’”" |> Quotes.fixTypographic

#!markdown

Listing 9-17. *Eliminating an unnecessary parameter*

#!fsharp

module Quotes = 

    module Typographic =
        let openSingle = '\u2018' // ‘
        let closeSingle = '\u2019' // ’
        let openDouble = '\u201C' // “
        let closeDouble = '\u201D' // ”

    module Neutral =
        let single = '\u0027' // '
        let double = '\u0022' // "'

    /// Translate any typographic single quotes to neutral ones.
    let fixSingle (s : string) =
        s
            .Replace(Typographic.openSingle, Neutral.single)
            .Replace(Typographic.closeSingle, Neutral.single)

    /// Translate any typographic double quotes to neutral ones.
    let fixDouble (s : string) =
        s
            .Replace(Typographic.openDouble, Neutral.double)
            .Replace(Typographic.closeDouble, Neutral.double)

    /// Translate any typographic quotes to neutral ones using
    /// function composition.
    let fixTypographic =
        fixSingle >> fixDouble
        
"This had “typographical ‘quotes’”" |> Quotes.fixTypographic

#!markdown

## Exercises

#!markdown

Exercise 9-1. *Functions as arguments*

#!fsharp

let add a b = a + b

let applyAndPrint f a b =
    let r = f a b
    printfn "%i" r

// "5"
applyAndPrint add 2 3

#!markdown

Exercise 9-2. *Functions returning functions*

#!fsharp

let counter start =
    let mutable current = start
    fun () ->
        let this = current
        current <- current + 1
        this

let c1 = counter 0
let c2 = counter 100

for _ in 0..4 do
    printfn "c1: %i" (c1())
    printfn "c2: %i" (c2())

#!markdown

Exercise 9-3. *Partial application*

#!fsharp

let featureScale a b xMin xMax x =
    a + ((x - xMin) * (b - a)) / (xMax - xMin)

let scale (data : seq<float>) =
    let minX = data |> Seq.min
    let maxX = data |> Seq.max
    // let zeroOneScale = ...
    data
    |> Seq.map (fun x -> featureScale 0. 1. minX maxX x)
    // |> Seq.map zeroOneScale

// seq [0.0; 0.5; 1.0]
[100.; 150.; 200.]
|> scale

#!markdown

Exercise 9-4. *Function composition*

#!fsharp

let pipeline =
    [ fun x -> x * 2.
      fun x -> x * x
      fun x -> x - 99.9 ]

let applyAll (p : (float -> float) list) =
    // Replace this:
    raise <| System.NotImplementedException()

let r = 100. |> applyAll pipeline
// 39900.1
printfn "%f" r

#!markdown

## Exercise Solutions

#!markdown

Exercise 9-1. *Functions as arguments* (Solution)

#!fsharp

let add a b = a + b
let multiply a b = a * b

let applyAndPrint f a b =
    let r = f a b
    printfn "%i" r

// "5"
applyAndPrint add 2 3
// "6"
applyAndPrint multiply 2 3
// "-1"
applyAndPrint (fun x y -> x - y) 2 3
// "-1"
applyAndPrint (-) 2 3

#!markdown

Exercise 9-2. *Functions returning functions* (Solution)

#!fsharp

let rangeCounter first last =
    let mutable current = first
    fun () ->
        let this = current
        let next = current + 1
        current <-
            if next <= last then
                next
            else
                first
        this
        
// r1: 3 r2: 6
// r1: 4 r2: 7
// r1: 5 r2: 8
// r1: 6 r2: 9
// r1: 3 r2: 10
// r1: 4 r2: 11
// ...
// r1: 3 r2: 8
let r1 = rangeCounter 3 6
let r2 = rangeCounter 6 11
for _ in 0..20 do
    printfn "r1: %i r2: %i" (r1()) (r2())

#!markdown

Exercise 9-3. *Partial application* (Solution)

#!fsharp

let featureScale a b xMin xMax x =
    a + ((x - xMin) * (b - a)) / (xMax - xMin)

let scale (data : seq<float>) =
    let minX = data |> Seq.min
    let maxX = data |> Seq.max
    let zeroOneScale = featureScale 0. 1. minX maxX
    data
    |> Seq.map zeroOneScale
    
// seq [0.0; 0.5; 1.0]
[100.; 150.; 200.]
|> scale

#!markdown

Exercise 9-4. *Function composition* (Solution)

#!fsharp

let pipeline =
    [ fun x -> x * 2.
      fun x -> x * x
      fun x -> x - 99.9 ]

let applyAll (p : (float -> float) list) =
    p |> List.reduce (>>)

// Alternatively:
// let applyAll = 
//     List.reduce (>>)    

let r = 100. |> applyAll pipeline
// 39900.1
printfn "%f" r
